/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TokenVesting {
  export type AirdropStruct = {
    start: BigNumberish;
    cliff: BigNumberish;
    duration: BigNumberish;
    slicePeriodSeconds: BigNumberish;
  };

  export type AirdropStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    start: BigNumber;
    cliff: BigNumber;
    duration: BigNumber;
    slicePeriodSeconds: BigNumber;
  };

  export type VestingStruct = {
    airdropId: BigNumberish;
    revocable: boolean;
    revoked: boolean;
    claimed: boolean;
    amountTotal: BigNumberish;
    released: BigNumberish;
  };

  export type VestingStructOutput = [
    number,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    airdropId: number;
    revocable: boolean;
    revoked: boolean;
    claimed: boolean;
    amountTotal: BigNumber;
    released: BigNumber;
  };

  export type ScheduleStruct = {
    vesting: TokenVesting.VestingStruct;
    airdrop: TokenVesting.AirdropStruct;
  };

  export type ScheduleStructOutput = [
    TokenVesting.VestingStructOutput,
    TokenVesting.AirdropStructOutput
  ] & {
    vesting: TokenVesting.VestingStructOutput;
    airdrop: TokenVesting.AirdropStructOutput;
  };
}

export interface TokenVestingInterface extends utils.Interface {
  functions: {
    "addManager(address)": FunctionFragment;
    "claimDiscord(uint64,address)": FunctionFragment;
    "computeIdForDiscordAndIndex(uint256,uint256)": FunctionFragment;
    "computeNextIdForAddress(address)": FunctionFragment;
    "computeNextIdForDiscord(uint64)": FunctionFragment;
    "computeReleasableAmount(bytes32)": FunctionFragment;
    "createSchedule(uint64,uint8,uint64,uint64,uint64,uint64,bool,uint112)": FunctionFragment;
    "createSchedulesBatch(uint64[],uint8,uint64,uint64,uint64,uint64,bool,uint112[])": FunctionFragment;
    "erc1155()": FunctionFragment;
    "erc20()": FunctionFragment;
    "erc721()": FunctionFragment;
    "getAddressByDiscord(uint64)": FunctionFragment;
    "getAirdrop(uint8)": FunctionFragment;
    "getAirdropId(bytes32)": FunctionFragment;
    "getDiscordByAddress(address)": FunctionFragment;
    "getReclaimableAmount()": FunctionFragment;
    "getSchedule(bytes32)": FunctionFragment;
    "getScheduleByAddressAndIndex(address,uint256)": FunctionFragment;
    "getScheduleByDiscordAndIndex(uint64,uint256)": FunctionFragment;
    "getScheduleIdAtIndex(uint256)": FunctionFragment;
    "getSchedulesCount()": FunctionFragment;
    "getSchedulesCountByAddress(address)": FunctionFragment;
    "getSchedulesCountByDiscord(uint64)": FunctionFragment;
    "getSchedulesTotalBalance()": FunctionFragment;
    "getVesting(bytes32)": FunctionFragment;
    "manager()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "reclaim(uint256)": FunctionFragment;
    "releaseAllDiscord(uint64)": FunctionFragment;
    "releaseDiscord(bytes32,uint64,uint112)": FunctionFragment;
    "removeManager()": FunctionFragment;
    "retrieveERC1155(address,uint256,uint256,bytes)": FunctionFragment;
    "retrieveERC20(address)": FunctionFragment;
    "retrieveERC721(address,uint256)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "revokeList(bytes32[])": FunctionFragment;
    "revokeUnclaimedAirdropBatch(uint8,uint256)": FunctionFragment;
    "revokeUnclaimedBatch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addManager"
      | "claimDiscord"
      | "computeIdForDiscordAndIndex"
      | "computeNextIdForAddress"
      | "computeNextIdForDiscord"
      | "computeReleasableAmount"
      | "createSchedule"
      | "createSchedulesBatch"
      | "erc1155"
      | "erc20"
      | "erc721"
      | "getAddressByDiscord"
      | "getAirdrop"
      | "getAirdropId"
      | "getDiscordByAddress"
      | "getReclaimableAmount"
      | "getSchedule"
      | "getScheduleByAddressAndIndex"
      | "getScheduleByDiscordAndIndex"
      | "getScheduleIdAtIndex"
      | "getSchedulesCount"
      | "getSchedulesCountByAddress"
      | "getSchedulesCountByDiscord"
      | "getSchedulesTotalBalance"
      | "getVesting"
      | "manager"
      | "owner"
      | "pause"
      | "paused"
      | "reclaim"
      | "releaseAllDiscord"
      | "releaseDiscord"
      | "removeManager"
      | "retrieveERC1155"
      | "retrieveERC20"
      | "retrieveERC721"
      | "revoke"
      | "revokeList"
      | "revokeUnclaimedAirdropBatch"
      | "revokeUnclaimedBatch"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimDiscord",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeIdForDiscordAndIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextIdForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextIdForDiscord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeReleasableAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSchedule",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSchedulesBatch",
    values: [
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "erc1155", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc721", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddressByDiscord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscordByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReclaimableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduleByAddressAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduleByDiscordAndIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduleIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesCountByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesCountByDiscord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVesting",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reclaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAllDiscord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseDiscord",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveERC1155",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeList",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeUnclaimedAirdropBatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeUnclaimedBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeIdForDiscordAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextIdForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextIdForDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSchedulesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc1155", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressByDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiscordByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReclaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduleByAddressAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduleByDiscordAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduleIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesCountByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesCountByDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseAllDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDiscord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeUnclaimedAirdropBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeUnclaimedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "BatchRevoked(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reclaimed(uint112)": EventFragment;
    "Released(bytes32,uint64,address,uint112,uint128)": EventFragment;
    "ScheduleClaimed(uint64,address)": EventFragment;
    "ScheduleCreated(uint64,bytes32)": EventFragment;
    "ScheduleRevoked(bytes32,uint256,uint256)": EventFragment;
    "TokenDrained(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDrained"): EventFragment;
}

export interface BatchRevokedEventObject {
  endingIndex: BigNumber;
}
export type BatchRevokedEvent = TypedEvent<
  [BigNumber],
  BatchRevokedEventObject
>;

export type BatchRevokedEventFilter = TypedEventFilter<BatchRevokedEvent>;

export interface OwnershipTransferredEventObject {
  user: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReclaimedEventObject {
  amount: BigNumber;
}
export type ReclaimedEvent = TypedEvent<[BigNumber], ReclaimedEventObject>;

export type ReclaimedEventFilter = TypedEventFilter<ReclaimedEvent>;

export interface ReleasedEventObject {
  scheduleId: string;
  discordId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type ReleasedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  ReleasedEventObject
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export interface ScheduleClaimedEventObject {
  discordId: BigNumber;
  beneficiary: string;
}
export type ScheduleClaimedEvent = TypedEvent<
  [BigNumber, string],
  ScheduleClaimedEventObject
>;

export type ScheduleClaimedEventFilter = TypedEventFilter<ScheduleClaimedEvent>;

export interface ScheduleCreatedEventObject {
  discordId: BigNumber;
  scheduleId: string;
}
export type ScheduleCreatedEvent = TypedEvent<
  [BigNumber, string],
  ScheduleCreatedEventObject
>;

export type ScheduleCreatedEventFilter = TypedEventFilter<ScheduleCreatedEvent>;

export interface ScheduleRevokedEventObject {
  scheduleId: string;
  unreleasedAmount: BigNumber;
  timestamp: BigNumber;
}
export type ScheduleRevokedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ScheduleRevokedEventObject
>;

export type ScheduleRevokedEventFilter = TypedEventFilter<ScheduleRevokedEvent>;

export interface TokenDrainedEventObject {
  owner: string;
  tokenContract: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type TokenDrainedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenDrainedEventObject
>;

export type TokenDrainedEventFilter = TypedEventFilter<TokenDrainedEvent>;

export interface TokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimDiscord(
      _discordId: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    computeIdForDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeNextIdForAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeNextIdForDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createSchedule(
      _discordId: BigNumberish,
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createSchedulesBatch(
      _discordIds: BigNumberish[],
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    erc1155(overrides?: CallOverrides): Promise<[string]>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    erc721(overrides?: CallOverrides): Promise<[string]>;

    getAddressByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAirdrop(
      airdropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokenVesting.AirdropStructOutput]>;

    getAirdropId(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDiscordByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReclaimableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[TokenVesting.ScheduleStructOutput]>;

    getScheduleByAddressAndIndex(
      beneficiary: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokenVesting.ScheduleStructOutput]>;

    getScheduleByDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TokenVesting.ScheduleStructOutput]>;

    getScheduleIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSchedulesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSchedulesCountByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSchedulesCountByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSchedulesTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVesting(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[TokenVesting.VestingStructOutput]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    reclaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    releaseAllDiscord(
      _discordId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    releaseDiscord(
      scheduleId: BytesLike,
      discordId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeManager(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    retrieveERC1155(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    retrieveERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    retrieveERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeList(
      schedules: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeUnclaimedAirdropBatch(
      airdropId: BigNumberish,
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeUnclaimedBatch(
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addManager(
    _manager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimDiscord(
    _discordId: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  computeIdForDiscordAndIndex(
    discordId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  computeNextIdForAddress(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeNextIdForDiscord(
    _discordId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  computeReleasableAmount(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createSchedule(
    _discordId: BigNumberish,
    _airdropId: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    _slicePeriodSeconds: BigNumberish,
    _revocable: boolean,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createSchedulesBatch(
    _discordIds: BigNumberish[],
    _airdropId: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _duration: BigNumberish,
    _slicePeriodSeconds: BigNumberish,
    _revocable: boolean,
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  erc1155(overrides?: CallOverrides): Promise<string>;

  erc20(overrides?: CallOverrides): Promise<string>;

  erc721(overrides?: CallOverrides): Promise<string>;

  getAddressByDiscord(
    _discordId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAirdrop(
    airdropId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokenVesting.AirdropStructOutput>;

  getAirdropId(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDiscordByAddress(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReclaimableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getSchedule(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<TokenVesting.ScheduleStructOutput>;

  getScheduleByAddressAndIndex(
    beneficiary: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokenVesting.ScheduleStructOutput>;

  getScheduleByDiscordAndIndex(
    discordId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TokenVesting.ScheduleStructOutput>;

  getScheduleIdAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSchedulesCountByAddress(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSchedulesCountByDiscord(
    _discordId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSchedulesTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getVesting(
    vestingScheduleId: BytesLike,
    overrides?: CallOverrides
  ): Promise<TokenVesting.VestingStructOutput>;

  manager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reclaim(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  releaseAllDiscord(
    _discordId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  releaseDiscord(
    scheduleId: BytesLike,
    discordId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeManager(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  retrieveERC1155(
    tokenAddress: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  retrieveERC20(
    tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  retrieveERC721(
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revoke(
    scheduleId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeList(
    schedules: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeUnclaimedAirdropBatch(
    airdropId: BigNumberish,
    batchSize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeUnclaimedBatch(
    batchSize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    claimDiscord(
      _discordId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    computeIdForDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    computeNextIdForAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeNextIdForDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSchedule(
      _discordId: BigNumberish,
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSchedulesBatch(
      _discordIds: BigNumberish[],
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    erc1155(overrides?: CallOverrides): Promise<string>;

    erc20(overrides?: CallOverrides): Promise<string>;

    erc721(overrides?: CallOverrides): Promise<string>;

    getAddressByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAirdrop(
      airdropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokenVesting.AirdropStructOutput>;

    getAirdropId(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiscordByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReclaimableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<TokenVesting.ScheduleStructOutput>;

    getScheduleByAddressAndIndex(
      beneficiary: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokenVesting.ScheduleStructOutput>;

    getScheduleByDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TokenVesting.ScheduleStructOutput>;

    getScheduleIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedulesCountByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesCountByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVesting(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<TokenVesting.VestingStructOutput>;

    manager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reclaim(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    releaseAllDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseDiscord(
      scheduleId: BytesLike,
      discordId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeManager(overrides?: CallOverrides): Promise<void>;

    retrieveERC1155(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveERC20(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revoke(scheduleId: BytesLike, overrides?: CallOverrides): Promise<void>;

    revokeList(
      schedules: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeUnclaimedAirdropBatch(
      airdropId: BigNumberish,
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeUnclaimedBatch(
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BatchRevoked(uint256)"(endingIndex?: null): BatchRevokedEventFilter;
    BatchRevoked(endingIndex?: null): BatchRevokedEventFilter;

    "OwnershipTransferred(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      user?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Reclaimed(uint112)"(amount?: null): ReclaimedEventFilter;
    Reclaimed(amount?: null): ReclaimedEventFilter;

    "Released(bytes32,uint64,address,uint112,uint128)"(
      scheduleId?: BytesLike | null,
      discordId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      timestamp?: null
    ): ReleasedEventFilter;
    Released(
      scheduleId?: BytesLike | null,
      discordId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      timestamp?: null
    ): ReleasedEventFilter;

    "ScheduleClaimed(uint64,address)"(
      discordId?: BigNumberish | null,
      beneficiary?: string | null
    ): ScheduleClaimedEventFilter;
    ScheduleClaimed(
      discordId?: BigNumberish | null,
      beneficiary?: string | null
    ): ScheduleClaimedEventFilter;

    "ScheduleCreated(uint64,bytes32)"(
      discordId?: BigNumberish | null,
      scheduleId?: BytesLike | null
    ): ScheduleCreatedEventFilter;
    ScheduleCreated(
      discordId?: BigNumberish | null,
      scheduleId?: BytesLike | null
    ): ScheduleCreatedEventFilter;

    "ScheduleRevoked(bytes32,uint256,uint256)"(
      scheduleId?: BytesLike | null,
      unreleasedAmount?: null,
      timestamp?: null
    ): ScheduleRevokedEventFilter;
    ScheduleRevoked(
      scheduleId?: BytesLike | null,
      unreleasedAmount?: null,
      timestamp?: null
    ): ScheduleRevokedEventFilter;

    "TokenDrained(address,address,uint256,uint256)"(
      owner?: string | null,
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokenDrainedEventFilter;
    TokenDrained(
      owner?: string | null,
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      amount?: null
    ): TokenDrainedEventFilter;
  };

  estimateGas: {
    addManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimDiscord(
      _discordId: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    computeIdForDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNextIdForAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNextIdForDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSchedule(
      _discordId: BigNumberish,
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createSchedulesBatch(
      _discordIds: BigNumberish[],
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    erc1155(overrides?: CallOverrides): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    erc721(overrides?: CallOverrides): Promise<BigNumber>;

    getAddressByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAirdrop(
      airdropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAirdropId(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiscordByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReclaimableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduleByAddressAndIndex(
      beneficiary: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduleByDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduleIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedulesCountByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesCountByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVesting(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reclaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    releaseAllDiscord(
      _discordId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    releaseDiscord(
      scheduleId: BytesLike,
      discordId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeManager(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    retrieveERC1155(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    retrieveERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    retrieveERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeList(
      schedules: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeUnclaimedAirdropBatch(
      airdropId: BigNumberish,
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeUnclaimedBatch(
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    addManager(
      _manager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimDiscord(
      _discordId: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    computeIdForDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeNextIdForAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeNextIdForDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeReleasableAmount(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSchedule(
      _discordId: BigNumberish,
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createSchedulesBatch(
      _discordIds: BigNumberish[],
      _airdropId: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _duration: BigNumberish,
      _slicePeriodSeconds: BigNumberish,
      _revocable: boolean,
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    erc1155(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddressByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAirdrop(
      airdropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAirdropId(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDiscordByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReclaimableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedule(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduleByAddressAndIndex(
      beneficiary: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduleByDiscordAndIndex(
      discordId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduleIdAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSchedulesCountByAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesCountByDiscord(
      _discordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesTotalBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVesting(
      vestingScheduleId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaim(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    releaseAllDiscord(
      _discordId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    releaseDiscord(
      scheduleId: BytesLike,
      discordId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeManager(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    retrieveERC1155(
      tokenAddress: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    retrieveERC20(
      tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    retrieveERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revoke(
      scheduleId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeList(
      schedules: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeUnclaimedAirdropBatch(
      airdropId: BigNumberish,
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeUnclaimedBatch(
      batchSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
